// Use this as an overlay

// Character values are on the bottom of this document
// https://github.com/codeman38/vcr-fonts/blob/master/sources/stv5730/STV5730a.pdf
// Using the Common pass isn't strictly necessary here, just put
// the font data on your text print pass

// Font data gotten from STV5730's ROM, modified for size

/* stv5730.bin (6/18/2022 2:37:22 PM)
   StartOffset(h): 00000000, EndOffset(h): 00000A1F, Length(h): 00000A20 */

int[] font = int[](
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60606060, 0x60606060, 0x60606060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x06000600, 0x1E001E00,
	0x06000600, 0x06000600, 0x06000600,
	0x06000600, 0x1F801F80, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x006000E0, 0x1FC03F80, 0x70006000,
	0x60006000, 0x7FE07FE0, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x006000E0, 0x07C007C0, 0x00E00060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x07800F80, 0x1D803980,
	0x71806180, 0x61806180, 0x7FE07FE0,
	0x01800180, 0x01800180, 0x00000000,
	0x00000000, 0x7FE07FE0, 0x60006000,
	0x7F807FC0, 0x00E00060, 0x00600060,
	0x606070E0, 0x3FC01F00, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60006000, 0x7F807FC0, 0x60E06060,
	0x606070C0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x7FE07FE0, 0x006000C0,
	0x01800300, 0x06000600, 0x06000600,
	0x06000600, 0x06000600, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x606070E0, 0x3FC03FC0, 0x70E06060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60607060, 0x3FE01FE0, 0x00600060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x3FC03FC0, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x06000F00, 0x1F8039C0,
	0x70E06060, 0x60606060, 0x7FE07FE0,
	0x60606060, 0x60606060, 0x00000000,
	0x00000000, 0x7F807FC0, 0x60E06060,
	0x606060E0, 0x7FC07FC0, 0x60E06060,
	0x606060E0, 0x7FC07F80, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60006000, 0x60006000, 0x60006000,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x7F807FC0, 0x60E06060,
	0x60606060, 0x60606060, 0x60606060,
	0x606060E0, 0x7FC07F80, 0x00000000,
	0x00000000, 0x7FE07FE0, 0x60006000,
	0x60006000, 0x7F807F80, 0x60006000,
	0x60006000, 0x7FE07FE0, 0x00000000,
	0x00000000, 0x7FE07FE0, 0x60006000,
	0x60006000, 0x7F807F80, 0x60006000,
	0x60006000, 0x60006000, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60006000, 0x63E063E0, 0x60606060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x60606060, 0x60606060,
	0x60606060, 0x7FE07FE0, 0x60606060,
	0x60606060, 0x60606060, 0x00000000,
	0x00000000, 0x1F801F80, 0x06000600,
	0x06000600, 0x06000600, 0x06000600,
	0x06000600, 0x1F801F80, 0x00000000,
	0x00000000, 0x07E007E0, 0x01800180,
	0x01800180, 0x01800180, 0x01800180,
	0x61807380, 0x3F001E00, 0x00000000,
	0x00000000, 0x606060E0, 0x61C06380,
	0x67007E00, 0x7C007C00, 0x6E006700,
	0x638061C0, 0x60E06060, 0x00000000,
	0x00000000, 0x60006000, 0x60006000,
	0x60006000, 0x60006000, 0x60006000,
	0x60006000, 0x7FE07FE0, 0x00000000,
	0x00000000, 0x60606060, 0x70E079E0,
	0x7FE06F60, 0x66606060, 0x60606060,
	0x60606060, 0x60606060, 0x00000000,
	0x00000000, 0x60606060, 0x60607060,
	0x78607C60, 0x6E606760, 0x63E061E0,
	0x60E06060, 0x60606060, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60606060, 0x60606060, 0x60606060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x7F807FC0, 0x60E06060,
	0x606060E0, 0x7FC07F80, 0x60006000,
	0x60006000, 0x60006000, 0x00000000,
	0x00000000, 0x1F803FC0, 0x70E06060,
	0x60606060, 0x60606060, 0x66606760,
	0x63E071C0, 0x3FE01E60, 0x00000000,
	0x00000000, 0x7F807FC0, 0x60E06060,
	0x606060E0, 0x7FC07F80, 0x6E006700,
	0x638061C0, 0x60E06060, 0x00000000,
	0x00000000, 0x1FE03FE0, 0x70006000,
	0x60007000, 0x3F801FC0, 0x00E00060,
	0x006000E0, 0x7FC07F80, 0x00000000,
	0x00000000, 0x7FE07FE0, 0x06000600,
	0x06000600, 0x06000600, 0x06000600,
	0x06000600, 0x06000600, 0x00000000,
	0x00000000, 0x60606060, 0x60606060,
	0x60606060, 0x60606060, 0x60606060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x60606060, 0x60606060,
	0x60606060, 0x60606060, 0x606070E0,
	0x39C01F80, 0x0F000600, 0x00000000,
	0x00000000, 0x60606060, 0x60606060,
	0x60606060, 0x60606660, 0x6F607FE0,
	0x79E070E0, 0x60606060, 0x00000000,
	0x00000000, 0x60606060, 0x606070E0,
	0x39C01F80, 0x0F000F00, 0x1F8039C0,
	0x70E06060, 0x60606060, 0x00000000,
	0x00000000, 0x60606060, 0x60606060,
	0x70E039C0, 0x1F800F00, 0x06000600,
	0x06000600, 0x06000600, 0x00000000,
	0x00000000, 0x7FE07FE0, 0x006000E0,
	0x01C00380, 0x07000E00, 0x1C003800,
	0x70006000, 0x7FE07FE0, 0x00000000,
	0x00000000, 0x00000000, 0x06000600,
	0x00000000, 0x00000000, 0x00000000,
	0x06000600, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x60006000, 0x00000000,
	0x00000000, 0x00000000, 0x006000E0,
	0x01C00380, 0x07000E00, 0x1C003800,
	0x70006000, 0x00000000, 0x00000000,
	0x00000000, 0x06000600, 0x02000400,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F003F80, 0x31C000C0, 0x1FC03FC0,
	0x70C060C0, 0x7FE03F60, 0x00000000,
	0x00000000, 0x60006000, 0x60006000,
	0x6F807FC0, 0x70E06060, 0x60606060,
	0x606060E0, 0x7FC07F80, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F803FC0, 0x70E06000, 0x60006000,
	0x600070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x00C000C0, 0x00C000C0,
	0x1FC03FC0, 0x30C060C0, 0x60C060C0,
	0x60C030C0, 0x3FE01FE0, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F803FC0, 0x70E06060, 0x7FE07FE0,
	0x600070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x07800FC0, 0x0CC00C00,
	0x0C003F00, 0x3F000C00, 0x0C000C00,
	0x0C000C00, 0x0C000C00, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F603FE0, 0x70E06060, 0x70E03FE0,
	0x1F600060, 0x70E03FC0, 0x1F800000,
	0x00000000, 0x60006000, 0x60006000,
	0x67806FC0, 0x78E07060, 0x60606060,
	0x60606060, 0x60606060, 0x00000000,
	0x00000000, 0x06000600, 0x00000000,
	0x0E000600, 0x06000600, 0x06000600,
	0x06000600, 0x06001F80, 0x00000000,
	0x00000000, 0x01800180, 0x00000000,
	0x03800180, 0x01800180, 0x01800180,
	0x01803180, 0x3B801F00, 0x0E000000,
	0x00000000, 0x60006000, 0x60006000,
	0x606060E0, 0x61C06380, 0x67006F00,
	0x7F8079C0, 0x60E06060, 0x00000000,
	0x00000000, 0x0E000600, 0x06000600,
	0x06000600, 0x06000600, 0x06000600,
	0x06000680, 0x07800300, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x6DC076C0, 0x66606660, 0x66606660,
	0x66606660, 0x66606660, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x6F807FC0, 0x70E07060, 0x60606060,
	0x60606060, 0x60606060, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F803FC0, 0x70E06060, 0x60606060,
	0x606070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x6F807FC0, 0x70E06060, 0x606070E0,
	0x7FC06F80, 0x60006000, 0x60000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F603FE0, 0x70E06060, 0x606070E0,
	0x3FE01F60, 0x00600060, 0x00600000,
	0x00000000, 0x00000000, 0x00000000,
	0x6F807FC0, 0x78E07060, 0x60006000,
	0x60006000, 0x60006000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x1F803FC0, 0x70E07000, 0x3F803FC0,
	0x00E070E0, 0x3FC01F80, 0x00000000,
	0x00000000, 0x06000600, 0x06000600,
	0x1F801F80, 0x06000600, 0x06000600,
	0x06000600, 0x07800380, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x60606060, 0x60606060, 0x60606060,
	0x606070E0, 0x3FE01F60, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x60606060, 0x60606060, 0x606070E0,
	0x39C01F80, 0x0F000600, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x60606060, 0x66606660, 0x66606660,
	0x6F607FE0, 0x39C01080, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x606070E0, 0x39C01F80, 0x0F000F00,
	0x1F8039C0, 0x70E06060, 0x00000000,
	0x00000000, 0x00000000, 0x00000000,
	0x60606060, 0x60606060, 0x70603FE0,
	0x1FE00060, 0x00E01FC0, 0x1F800000,
	0x00000000, 0x00000000, 0x00000000,
	0x7FE07FE0, 0x01C00380, 0x07000E00,
	0x1C003800, 0x7FE07FE0, 0x00000000,
	0x00000000, 0x00001000, 0x18001C00,
	0x1E001F00, 0x1F801FC0, 0x1F801F00,
	0x1E001C00, 0x18001000, 0x00000000,
	0x00000000, 0x00008400, 0xC600E700,
	0xF780FFC0, 0xFFE0FFF0, 0xFFE0FFC0,
	0xF780E700, 0xC6008400, 0x00000000,
	0x00000000, 0x00000210, 0x06300E70,
	0x1EF03FF0, 0x7FF0FFF0, 0x7FF03FF0,
	0x1EF00E70, 0x06300210, 0x00000000,
	0x00000000, 0x00007FE0, 0x7FE07FE0,
	0x7FE07FE0, 0x7FE07FE0, 0x7FE07FE0,
	0x7FE07FE0, 0x7FE07FE0, 0x00000000
);

int get_char_pixel(int x, int y, int c, bool inv) {
    int base = ((x >> 3) + (y * 2) + (c * 0x24)) >> 2;
    
    int offset = ((y & 0x1) != 0) ? 0 : 16; 
    int value = (font[base] >> offset) & 0xffff;
    
    if (inv) {
        return (value & (1 << (0xf - (x & 0xf)))) == 0 ? 1 : 2;
    } else {
        return (value & (1 << (0xf - (x & 0xf)))) != 0 ? 1 : 0;
    }
}

int print_char(vec2 p, vec2 g, int c, bool inv, bool border) {
    bool box = (p.x >= (g.x * 12.0)) && (p.x < ((g.x + 1.0) * 12.0)) &&
               (p.y >= (g.y * 18.0)) && (p.y < ((g.y + 1.0) * 18.0));
    
    if (!box) return 0;
    
    if (border && !inv) {
        int pixel = get_char_pixel(int(p.x) % 12, int(p.y) % 18, c, inv);
        
        if (pixel != 0) return 1;
        
        for (int y = -1; y <= 1; y++) {
            for (int x = -1; x <= 1; x++) {
                pixel = get_char_pixel((int(p.x) + x) % 12, (int(p.y) + y) % 18, c, false);
           
                if (pixel != 0) return 2;
            }
        }
    }

    return get_char_pixel(int(p.x) % 12, int(p.y) % 18, c, inv);
}

int characters[2];

void number_to_characters(float n) {
    int high = int(floor(n / 10.0)),
        low = int(n) - (high * 10);
    
    characters[0] = high;
    characters[1] = low;
}

void main() {
    vec2 p = vec2(frag_coord.x, resolution.y - frag_coord.y) / 2.5;
    
    vec4 t = texture(input_texture, frag_coord / resolution);
    
    int acc = 0;
    
    // Play
    acc += int(print_char(p, vec2(2.0, 1.0) , 0x1e, false, true)); // P
    acc += int(print_char(p, vec2(3.0, 1.0) , 0x1f, false, true)); // L
    acc += int(print_char(p, vec2(4.0, 1.0) , 0x1a, false, true)); // A
    acc += int(print_char(p, vec2(5.0, 1.0) , 0x1b, false, true)); // Y
    acc += int(print_char(p, vec2(7.0, 1.0) , 0x47, false, true)); // ►
    // acc += int(print_char(p, vec2(2.0, 1.0) , 0x1b, false, true)); // P
    // acc += int(print_char(p, vec2(3.0, 1.0) , 0x17, false, true)); // L
    // acc += int(print_char(p, vec2(4.0, 1.0) , 0x0c, false, true)); // A
    // acc += int(print_char(p, vec2(5.0, 1.0) , 0x24, false, true)); // Y
    // acc += int(print_char(p, vec2(7.0, 1.0) , 0x44, false, true)); // ►
    
    // This pass lets iChannel0 pass through
    if (acc == 0) frag_color = t;
    if (acc == 1) frag_color = vec4(1.0);
    if (acc == 2) frag_color = vec4(0.0, 0.0, 0.0, 1.0);
}